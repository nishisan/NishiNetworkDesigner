/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nishisan.designer.gui;

import com.nishisan.designer.dto.CmdbMap;
import com.nishisan.designer.dto.CmdbMapChildFactory;
import com.nishisan.designer.objects.CmdbMapNode;
import java.awt.BorderLayout;
import java.awt.Event;
import java.util.Collection;
import org.apache.log4j.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nishisan.designer.gui//MapExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MapExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.nishisan.designer.gui.MapExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MapExplorerAction",
        preferredID = "MapExplorerTopComponent"
)
@Messages({
    "CTL_MapExplorerAction=MapExplorer",
    "CTL_MapExplorerTopComponent=Map Explorer",
    "HINT_MapExplorerTopComponent=This is a MapExplorer window"
})
public final class MapExplorerTopComponent extends TopComponent implements LookupListener {

    private final ExplorerManager mgr = new ExplorerManager();
    private final Logger logger = Logger.getLogger(MapExplorerTopComponent.class);
    private final InstanceContent content = new InstanceContent();
    private Lookup.Result<CmdbMap> result = null;

    public MapExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_MapExplorerTopComponent());
        setToolTipText(Bundle.HINT_MapExplorerTopComponent());
        setLayout(new BorderLayout());
        CmdbMap m = new CmdbMap();
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));

        add(new BeanTreeView(), BorderLayout.CENTER);

        mgr.setRootContext(new CmdbMapNode());
        logger.debug("Done Setting Root Context..");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        result = Utilities.actionsGlobalContext().lookupResult(CmdbMap.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends CmdbMap> allEvents = result.allInstances();
        if (!allEvents.isEmpty()) {
            CmdbMap event = allEvents.iterator().next();
           
        } else {
            
        }
        logger.debug("Selection Changed..");
    }
}
